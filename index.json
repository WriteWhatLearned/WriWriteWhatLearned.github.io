[{"categories":[],"content":"算法与数据结构，python语言描述，比较系统的富有逻辑和理论推导的手边工具书~~~","date":"2023-06-18","objectID":"/algorithm_and_data_structure/","tags":[],"title":"Algorithm and Data Structure","uri":"/algorithm_and_data_structure/"},{"categories":[],"content":"数据结构与算法 ","date":"2023-06-18","objectID":"/algorithm_and_data_structure/:0:0","tags":[],"title":"Algorithm and Data Structure","uri":"/algorithm_and_data_structure/"},{"categories":[],"content":"数据结构 ","date":"2023-06-18","objectID":"/algorithm_and_data_structure/:1:0","tags":[],"title":"Algorithm and Data Structure","uri":"/algorithm_and_data_structure/"},{"categories":[],"content":"结构性数据结构 结构性数据结构对其数据元素之间的相关关系都做了一些明确规定，元素之间确实满足某种关系（如线性关系等），通常遵循该关系对数据进行存储方式设计和实现增删改查操作，典型的有集合结构、线性结构、层次结构、树形结构、图结构等。 集合结构 集合 线性结构（序列结构） 列表 链表 层次结构 树形结构 图结构 ","date":"2023-06-18","objectID":"/algorithm_and_data_structure/:1:1","tags":[],"title":"Algorithm and Data Structure","uri":"/algorithm_and_data_structure/"},{"categories":[],"content":"功能性数据结构 功能性数据结构并未对其元素的相互关系提出任何结构性的规定，而是要求实现某种计算中非常有用的功能，同时只要求具备数据存储和使用（元素访问）功能，对其数据如何存储、元素之间如何关联，并不做明确要求，因此该种支持元素存储和访问的数据集结构也被称为容器。 栈 队列 优先队列 字典 由于只有功能性要求，功能性数据结构理论上可以使用任何技术实现。而在实际使用中 ，通常是首先把功能性数据结构映射到结构性数据结构，而后采用相应的实现技术，如栈和队列通常使用线性结构，以列表或者链表方式具体实现。 ","date":"2023-06-18","objectID":"/algorithm_and_data_structure/:1:2","tags":[],"title":"Algorithm and Data Structure","uri":"/algorithm_and_data_structure/"},{"categories":[],"content":"算法 ","date":"2023-06-18","objectID":"/algorithm_and_data_structure/:2:0","tags":[],"title":"Algorithm and Data Structure","uri":"/algorithm_and_data_structure/"},{"categories":[],"content":"算法设计模式 枚举法 根据具体问题枚举出各种可能，从中选取有用信息或者问题的解。 贪心法 根据问题的信息尽可能做出部分的解，并基于部分解逐步扩充得到完整的解。 分治法 将复杂问题分解为相对简单的子问题，分别求解，最后通过组合起子问题解的方式得到原问题的解。 回溯法 专指通过搜索的方式求解，如果问题很复杂，没有清晰的求解路径，可能就需要分步骤进行，由于每一步骤都有很多选择，因此只能采用试探的方式，根据实际情况选择一个可能方向，然其后续步骤无法进一步求解时，就需要退回到前面的步骤，选择其他求解路径，如此往复的动作称作回溯。 动态规划法 在一些复杂情况下，问题求解很难直截了当进行，因此需要在前面的步骤中积累信息，在后续步骤中根据已知信息，动态选择一致的最好求解路径（同时可能进一步积累信息），如此方式称作动态规划。 分支限界法 作为搜索方法的一种改良形式，如果在搜索过程中可以得到一些信息，确定某些可能的选择实际上并不真正有用，就可以及早将其删除，以缩小可能的求解空间，加速问题求解过程。 ","date":"2023-06-18","objectID":"/algorithm_and_data_structure/:2:1","tags":[],"title":"Algorithm and Data Structure","uri":"/algorithm_and_data_structure/"},{"categories":[],"content":"算法分析 算法复杂度分析包括时间复杂度和空间复杂度。 时间复杂度 最少时间 最长时间 平均时间 空间复杂度 内存大小 ","date":"2023-06-18","objectID":"/algorithm_and_data_structure/:2:2","tags":[],"title":"Algorithm and Data Structure","uri":"/algorithm_and_data_structure/"},{"categories":["documentation"],"content":"像小说一样有趣的算法入门书，你值得拥有~~~","date":"2023-06-17","objectID":"/grokking_algorithms/","tags":["readlog","handbooks"],"title":"Grokking Algorithms","uri":"/grokking_algorithms/"},{"categories":["documentation"],"content":"算法图解 ","date":"2023-06-17","objectID":"/grokking_algorithms/:0:0","tags":["readlog","handbooks"],"title":"Grokking Algorithms","uri":"/grokking_algorithms/"},{"categories":["documentation"],"content":"这本书主要讲了什么？ ","date":"2023-06-17","objectID":"/grokking_algorithms/:1:0","tags":["readlog","handbooks"],"title":"Grokking Algorithms","uri":"/grokking_algorithms/"},{"categories":["documentation"],"content":"总览 算法图解是一本兼顾数据结构和算法的入门书籍，以算法原理讲解为主，对于算法所涉及的相应数据结构，通常会在开篇前进行介绍，但并不深究其具体实现细节和底层操作逻辑，讲究够用原则。 作为入门书籍，该书并不过分追求大而全的写作思路，而是侧重以大量图示对经典算法的底层原理进行剖析，同时为力求读者产生场景共鸣，使得讲解通俗易懂，作者所选用算法解决的实际问题和案例说明基本都是源自于生活中常常会遇到的场景。 摘要\r算法图解关注经典算法底层原理的图文解析，同时简要介绍所涉及到的数据结构。\r","date":"2023-06-17","objectID":"/grokking_algorithms/:1:1","tags":["readlog","handbooks"],"title":"Grokking Algorithms","uri":"/grokking_algorithms/"},{"categories":["documentation"],"content":"详览 本书从使用频率较高的查找算法开始，介绍了依赖有序数列的二分查找算法（binary search algorithm），并与简单查找算法（遍历查找）的计算时间进行对比，引出算法复杂度的概念和大O表示法的基本原理，并简单举例一些常见的大O表达式的运行时间，如： 大O表示法 简称 举例 $$O(logn)$$ 对数时间 二分查找 $$O(n)$$ 线性时间 简单查找 $$O(n*logn)$$ - 快速排序 $$O(n^2)$$ 平方时间 选择排序 $$O(n!)$$ 阶乘时间 TSP问题 同时进一步讲解了选择排序算法的实现原理，并介绍了线性表（数组列表和链表）的实现原理以及内存工作原理，为更快速的对数列进行排序，进一步讲解了快速排序算法的实现原理，并介绍分治策略和递归的实现原理，以及栈对于递归策略的支撑，为更快速的对数列进行查找，进一步讲解了散列表的实现原理。 接下来，作者引入图的概念，讲解了用于求解最短路径问题的广度优先搜索算法和迪杰斯特拉算法，举例介绍了两种算法的不同之处和局限性，同时介绍了队列数据结构对于广度优先算法的支撑。 最后，作者讲解了贪婪算法求解NP难问题，并介绍了如何识别NP难问题以及常见的几种NP难问题，此外还介绍了动态规划算法的实现原理用于求解背包问题和最长公共子串问题。 最后的最后，作者介绍了最近比较流行的一些机器算法，如K最近邻算法，以及后续如何为深入学习算法做哪些准备。 警告\r算法图解并未详细介绍树数据结构，虽然作者强调树可以认为是图的一个特殊实例，但是树作为高频使用的数据结构，读者有必要继续深入补充研究！\r","date":"2023-06-17","objectID":"/grokking_algorithms/:1:2","tags":["readlog","handbooks"],"title":"Grokking Algorithms","uri":"/grokking_algorithms/"},{"categories":["documentation"],"content":"我从这本书里面学到了什么？ ","date":"2023-06-17","objectID":"/grokking_algorithms/:2:0","tags":["readlog","handbooks"],"title":"Grokking Algorithms","uri":"/grokking_algorithms/"},{"categories":["documentation"],"content":"这本书给我的启发和思考有哪些？","date":"2023-06-17","objectID":"/grokking_algorithms/:3:0","tags":["readlog","handbooks"],"title":"Grokking Algorithms","uri":"/grokking_algorithms/"},{"categories":["Algorithm"],"content":"二分查找算法原理解析","date":"2023-06-10","objectID":"/binary_search/","tags":["Search Algorithm"],"title":"Binary Search","uri":"/binary_search/"},{"categories":["Algorithm"],"content":"二分查找 ","date":"2023-06-10","objectID":"/binary_search/:0:0","tags":["Search Algorithm"],"title":"Binary Search","uri":"/binary_search/"},{"categories":["Algorithm"],"content":"原理 二分查找，又称折半查找，即在有序序列中，通过每次比较查找值与序列中位数值的大小，从而确定查找值所存在的序列折半空间，依次循环往复，直至序列半空间大小为1时停止，从而确定该有序序列是否存在该值。 折半空间，即以序列中位数值为分割点，将序列对等分为左右子序列。 ","date":"2023-06-10","objectID":"/binary_search/:1:0","tags":["Search Algorithm"],"title":"Binary Search","uri":"/binary_search/"},{"categories":["Algorithm"],"content":"源码 def binary_search(ordered_list: list, find_value: any) -\u003e Union[int, None]: low = 0 high = len(ordered_list) - 1 # low和high跟踪折半空间 while low \u003c= high: # 循环结束准则，折半空间至少含有1个元素 mid = (low + high) / 2 # 每次比较其中位数值的索引 guess = ordered_list[mid] if guess == find_value: # 相等 return mid if guess \u003e find_value: # 大了，high取左边，即最大值在mid左边 high = mid - 1 else: # 小了，low取右边，即最小值在mid右边 low = mid + 1 return None ","date":"2023-06-10","objectID":"/binary_search/:2:0","tags":["Search Algorithm"],"title":"Binary Search","uri":"/binary_search/"},{"categories":["Algorithm"],"content":"复杂度 ","date":"2023-06-10","objectID":"/binary_search/:3:0","tags":["Search Algorithm"],"title":"Binary Search","uri":"/binary_search/"},{"categories":["Algorithm"],"content":"空间复杂度 ","date":"2023-06-10","objectID":"/binary_search/:3:1","tags":["Search Algorithm"],"title":"Binary Search","uri":"/binary_search/"},{"categories":["Algorithm"],"content":"时间复杂度","date":"2023-06-10","objectID":"/binary_search/:3:2","tags":["Search Algorithm"],"title":"Binary Search","uri":"/binary_search/"},{"categories":[],"content":"学而不思则罔，思而不学则殆 ...","date":"2023-06-08","objectID":"/about/author/","tags":[],"title":"Author","uri":"/about/author/"},{"categories":[],"content":"把学的写出来之禅 把学的写出来之禅，净、静、竞，是为三境界。 少时求学，二十载余。 即进而立，乃有所获。 凡治学者，由浅入深，计三境界。 其一，敏而好学，上下求索，出世也； 其二，纸浅学深，躬身践行，入世也； 其三，学为人师，娓娓道来，无相也。 取其一者，十之八九； 得其二者，不足五六； 成其三者，世之鲜有， … … ","date":"2023-06-08","objectID":"/about/author/:0:0","tags":[],"title":"Author","uri":"/about/author/"},{"categories":["documentation"],"content":"如何使用picgo将github作为图床仓库？","date":"2023-06-08","objectID":"/picture_bed/","tags":["picturebed","headbooks"],"title":"Picture Bed","uri":"/picture_bed/"},{"categories":["documentation"],"content":"缘起图床 随着接触的信息类型、数量等剧增，将信息转换成知识的链路过程越来越长，因此逐渐由轻记录养成了撰写博客的习惯，慢慢开始高频使用Markdown来撰写博客。 在深度使用兼容Markdown语言的编辑器，撰写博客过程中发现，Markdown编辑器的纯文本编辑和图文编辑与以Word为主的文本编辑器存在不同。 Markdown不同于Word（Word直接把图片、文本等统一打包在.doc文件内部），而是以链接(https://baike.baidu.com/item/markdown/markdown.png)和文件路径(./blog/20230105/markdown.png)等方式支持图片访问，使得纯文本和图片、视频、音频等资源分开存储。 Markdown 是一种轻量级标记语言，允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的 XHTML、HTML文档。 由于 Markdown 的轻量化、易读易写特性，并且对于图片，图表、数学式都有支持，许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。 如 GitHub、Reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge、简书等，甚至还能被使用来撰写电子书。 ","date":"2023-06-08","objectID":"/picture_bed/:0:0","tags":["picturebed","headbooks"],"title":"Picture Bed","uri":"/picture_bed/"},{"categories":["documentation"],"content":"Markdown文件共享 在需要进行Markdown文件共享时，通常采用以下两种方式，否则会遇到图片文件无法显示（图片等资源丢失）的尴尬局面。 1、如果图片文件以文件路径方式存放，进行Markdown文件共享时，常常需要将源文件和图片文件打包，才能进行源文件共享。 2、如果图片文件以外链（URL）方式存放，进行Markdown文件共享时，只需要进行源文件共享即可。 ","date":"2023-06-08","objectID":"/picture_bed/:1:0","tags":["picturebed","headbooks"],"title":"Picture Bed","uri":"/picture_bed/"},{"categories":["documentation"],"content":"基于Github搭建图片、视频等资源外链 但是如何获取图片外链，特别是本地图片如何生成外链。 此时就需要用到图床，即存储图片同时也可以为每一张图片提供访问链接。 图床：存储图片同时也可以为每一张图片提供访问链接。 ","date":"2023-06-08","objectID":"/picture_bed/:2:0","tags":["picturebed","headbooks"],"title":"Picture Bed","uri":"/picture_bed/"},{"categories":["documentation"],"content":"注册Github ","date":"2023-06-08","objectID":"/picture_bed/:2:1","tags":["picturebed","headbooks"],"title":"Picture Bed","uri":"/picture_bed/"},{"categories":["documentation"],"content":"创建Github仓库 仓库名称可自定义； 仓库属性为Public； Description、README、License等可自定义添加； ","date":"2023-06-08","objectID":"/picture_bed/:2:2","tags":["picturebed","headbooks"],"title":"Picture Bed","uri":"/picture_bed/"},{"categories":["documentation"],"content":"生成仓库访问密钥 单击Generate new token，生成仓库访问Token； 注意\rToken生成后只会显示一次！注意离线保存使用。\r基于Github生成的Token配置PicGo ","date":"2023-06-08","objectID":"/picture_bed/:2:3","tags":["picturebed","headbooks"],"title":"Picture Bed","uri":"/picture_bed/"},{"categories":["documentation"],"content":"详细配置介绍 ","date":"2023-06-08","objectID":"/picture_bed/:3:0","tags":["picturebed","headbooks"],"title":"Picture Bed","uri":"/picture_bed/"},{"categories":["documentation"],"content":"设定仓库名 仓库名的格式是用户名/仓库，比如我创建了一个叫做WX_BLOG_IMG的仓库，在PicGo里我要设定的仓库名就是WriteWhatLearned/WX_BLOG_IMG。 ","date":"2023-06-08","objectID":"/picture_bed/:3:1","tags":["picturebed","headbooks"],"title":"Picture Bed","uri":"/picture_bed/"},{"categories":["documentation"],"content":"设定分支名 一般我们选择main分支即可。然后记得点击确定以生效，然后可以点击设为默认图床来确保上传的图床是GitHub。 ","date":"2023-06-08","objectID":"/picture_bed/:3:2","tags":["picturebed","headbooks"],"title":"Picture Bed","uri":"/picture_bed/"},{"categories":["documentation"],"content":"设定Token 基于以上生成的Token。 ","date":"2023-06-08","objectID":"/picture_bed/:3:3","tags":["picturebed","headbooks"],"title":"Picture Bed","uri":"/picture_bed/"},{"categories":["documentation"],"content":"设定存储路径 如果需要对图片作分文件存储，需要在Github新建文件夹。 ","date":"2023-06-08","objectID":"/picture_bed/:3:4","tags":["picturebed","headbooks"],"title":"Picture Bed","uri":"/picture_bed/"},{"categories":["documentation"],"content":"设定自定义域名 设定图片外链自定义命名方式，如上图采用jsdeliver作图片资源的CDN加速的格式为https://cdn.jsdelivr.net/gh/用户名/仓库名@分支名。 ","date":"2023-06-08","objectID":"/picture_bed/:3:5","tags":["picturebed","headbooks"],"title":"Picture Bed","uri":"/picture_bed/"},{"categories":["documentation"],"content":"其他 目前提供图床功能的主流服务主要有以下几种： 编号 服务 链接 备注 开源 1 SM.MS https://smms.app/ - 原官网链接，https://sm.ms/已被屏蔽。 - 速度一般，传输和存储都有限制。 - 单次上传最多10张图片，单张图片最大5M。 是 2 Github https://github.com/ - 资源以公开仓库形式存储。 - 速度一般，速度和存储都有限制。 - 总容量限制1G，单张图片最大100M。 是 3 七牛云 https://sso.qiniu.com/ - 否 4 腾讯云COS https://cloud.tencent.com/ - 否 5 阿里云COS https://www.aliyun.com/ - 否 ","date":"2023-06-08","objectID":"/picture_bed/:4:0","tags":["picturebed","headbooks"],"title":"Picture Bed","uri":"/picture_bed/"},{"categories":["documentation"],"content":"图床管理程序/软件 - PicGo 软件下载 ","date":"2023-06-08","objectID":"/picture_bed/:5:0","tags":["picturebed","headbooks"],"title":"Picture Bed","uri":"/picture_bed/"}]